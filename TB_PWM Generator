library ieee;
use ieee.std_logic_1164.all;

entity tb_pwm_generator is
end tb_pwm_generator;

architecture tb of tb_pwm_generator is

    component pwm_generator
     generic (
            N : integer := 5;
            COUNT_END : integer := 500
        );
        port (clk : in std_logic;
              rst : in std_logic;
              en  : in std_logic;
              pwm : out std_logic);
    end component;

    signal clk : std_logic;
    signal rst : std_logic;
    signal en  : std_logic;
    signal pwm : std_logic;

    constant TbPeriod : time := 10 ns; -- EDIT Put right period here
    signal TbClock : std_logic := '0';
    signal TbSimEnded : std_logic := '0';

begin

    dut : pwm_generator
    generic map (
        N => 4,
        COUNT_END => 12)
    port map (clk => clk,
              rst => rst,
              en  => en,
              pwm => pwm);

    -- Clock generation
    TbClock <= not TbClock after TbPeriod/2 when TbSimEnded /= '1' else '0';

    -- EDIT: Check that clk is really your main clock signal
    clk <= TbClock;


    stimuli : process
    begin
        -- EDIT Adapt initialization as needed
        en <= '1';

        -- Reset generation
        -- EDIT: Check that rst is really your reset signal
        rst <= '1';
        wait for 10 ns;
        rst <= '0';
        wait for 10 ns;

        -- EDIT Add stimuli here
        wait for 35 * TbPeriod;

        -- Stop the clock and hence terminate the simulation
        TbSimEnded <= '1';
        wait;
    end process;

end tb;

-- Configuration block below is required by some simulators. Usually no need to edit.

configuration cfg_tb_pwm_generator of tb_pwm_generator is
    for tb
    end for;
end cfg_tb_pwm_generator;
